
Saakshi project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  0000029e  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a92  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000656  00000000  00000000  00000b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000175  00000000  00000000  0000115f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000254  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001528  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000172  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c5  00000000  00000000  0000172e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000018f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  7a:	0c 94 4d 01 	jmp	0x29a	; 0x29a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z8disp_cmdj>:
}


void disp_cmd(unsigned int cmd)
{
	PORTB=((cmd & 0XF0)+0X04);
  82:	9c 01       	movw	r18, r24
  84:	20 7f       	andi	r18, 0xF0	; 240
  86:	33 27       	eor	r19, r19
  88:	2c 5f       	subi	r18, 0xFC	; 252
  8a:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	ef ec       	ldi	r30, 0xCF	; 207
  8e:	f7 e0       	ldi	r31, 0x07	; 7
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <_Z8disp_cmdj+0xe>
  94:	00 c0       	rjmp	.+0      	; 0x96 <_Z8disp_cmdj+0x14>
  96:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB - 0X04;
  98:	98 b3       	in	r25, 0x18	; 24
  9a:	94 50       	subi	r25, 0x04	; 4
  9c:	98 bb       	out	0x18, r25	; 24
	PORTB=(((cmd<<4)& 0XF0)+0X04);
  9e:	82 95       	swap	r24
  a0:	80 7f       	andi	r24, 0xF0	; 240
  a2:	8c 5f       	subi	r24, 0xFC	; 252
  a4:	88 bb       	out	0x18, r24	; 24
  a6:	8f ec       	ldi	r24, 0xCF	; 207
  a8:	97 e0       	ldi	r25, 0x07	; 7
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <_Z8disp_cmdj+0x28>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_Z8disp_cmdj+0x2e>
  b0:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB-0X04;
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	84 50       	subi	r24, 0x04	; 4
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	08 95       	ret

000000ba <_Z9disp_datai>:
	
}
void disp_data( int cmd)
{
	PORTB=((cmd  & 0XF0)+0X05);
  ba:	9c 01       	movw	r18, r24
  bc:	20 7f       	andi	r18, 0xF0	; 240
  be:	33 27       	eor	r19, r19
  c0:	2b 5f       	subi	r18, 0xFB	; 251
  c2:	28 bb       	out	0x18, r18	; 24
  c4:	ef ec       	ldi	r30, 0xCF	; 207
  c6:	f7 e0       	ldi	r31, 0x07	; 7
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <_Z9disp_datai+0xe>
  cc:	00 c0       	rjmp	.+0      	; 0xce <_Z9disp_datai+0x14>
  ce:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB - 0X04;
  d0:	28 b3       	in	r18, 0x18	; 24
  d2:	24 50       	subi	r18, 0x04	; 4
  d4:	28 bb       	out	0x18, r18	; 24
	PORTB=(((cmd <<4)& 0XF0)+0X05);
  d6:	82 95       	swap	r24
  d8:	92 95       	swap	r25
  da:	90 7f       	andi	r25, 0xF0	; 240
  dc:	98 27       	eor	r25, r24
  de:	80 7f       	andi	r24, 0xF0	; 240
  e0:	98 27       	eor	r25, r24
  e2:	8b 5f       	subi	r24, 0xFB	; 251
  e4:	88 bb       	out	0x18, r24	; 24
  e6:	8f ec       	ldi	r24, 0xCF	; 207
  e8:	97 e0       	ldi	r25, 0x07	; 7
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <_Z9disp_datai+0x30>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <_Z9disp_datai+0x36>
  f0:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB-0X04;
  f2:	88 b3       	in	r24, 0x18	; 24
  f4:	84 50       	subi	r24, 0x04	; 4
  f6:	88 bb       	out	0x18, r24	; 24
  f8:	08 95       	ret

000000fa <_Z11disp_stringPc>:
	
}

void disp_string( char *str)
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
	int i=0;
	while (str[i]!='\0')
 100:	88 81       	ld	r24, Y
 102:	88 23       	and	r24, r24
 104:	39 f0       	breq	.+14     	; 0x114 <_Z11disp_stringPc+0x1a>
	_delay_ms(1);
	PORTB=PORTB-0X04;
	
}

void disp_string( char *str)
 106:	21 96       	adiw	r28, 0x01	; 1
{
	int i=0;
	while (str[i]!='\0')
	{
		disp_data (str[i]);
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 5d 00 	call	0xba	; 0xba <_Z9disp_datai>
}

void disp_string( char *str)
{
	int i=0;
	while (str[i]!='\0')
 10e:	89 91       	ld	r24, Y+
 110:	81 11       	cpse	r24, r1
 112:	fa cf       	rjmp	.-12     	; 0x108 <_Z11disp_stringPc+0xe>
	{
		disp_data (str[i]);
		i++;
		
	}
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <_Z8disp_numj>:

void disp_num(unsigned int num)
{
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
	int a=0;
	if (num==0)
 124:	00 97       	sbiw	r24, 0x00	; 0
 126:	81 f5       	brne	.+96     	; 0x188 <_Z8disp_numj+0x6e>
	{
		disp_data(48);
 128:	80 e3       	ldi	r24, 0x30	; 48
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 5d 00 	call	0xba	; 0xba <_Z9disp_datai>
	}
	disp_cmd (0X04);
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 138:	22 c0       	rjmp	.+68     	; 0x17e <_Z8disp_numj+0x64>
	while (num!=0)
	{
		a=num % 10;
 13a:	9e 01       	movw	r18, r28
 13c:	ad ec       	ldi	r26, 0xCD	; 205
 13e:	bc ec       	ldi	r27, 0xCC	; 204
 140:	0e 94 41 01 	call	0x282	; 0x282 <__umulhisi3>
 144:	8c 01       	movw	r16, r24
 146:	16 95       	lsr	r17
 148:	07 95       	ror	r16
 14a:	16 95       	lsr	r17
 14c:	07 95       	ror	r16
 14e:	16 95       	lsr	r17
 150:	07 95       	ror	r16
 152:	98 01       	movw	r18, r16
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	c8 01       	movw	r24, r16
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	82 0f       	add	r24, r18
 168:	93 1f       	adc	r25, r19
 16a:	9e 01       	movw	r18, r28
 16c:	28 1b       	sub	r18, r24
 16e:	39 0b       	sbc	r19, r25
 170:	c9 01       	movw	r24, r18
		disp_data(a+48);
 172:	c0 96       	adiw	r24, 0x30	; 48
 174:	0e 94 5d 00 	call	0xba	; 0xba <_Z9disp_datai>
		num=num/10;
 178:	e8 01       	movw	r28, r16
	if (num==0)
	{
		disp_data(48);
	}
	disp_cmd (0X04);
	while (num!=0)
 17a:	20 97       	sbiw	r28, 0x00	; 0
 17c:	f1 f6       	brne	.-68     	; 0x13a <_Z8disp_numj+0x20>
	{
		a=num % 10;
		disp_data(a+48);
		num=num/10;
	}
	disp_cmd (0X06);
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 186:	05 c0       	rjmp	.+10     	; 0x192 <_Z8disp_numj+0x78>
	int a=0;
	if (num==0)
	{
		disp_data(48);
	}
	disp_cmd (0X04);
 188:	84 e0       	ldi	r24, 0x04	; 4
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 190:	d4 cf       	rjmp	.-88     	; 0x13a <_Z8disp_numj+0x20>
		a=num % 10;
		disp_data(a+48);
		num=num/10;
	}
	disp_cmd (0X06);
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	1f 91       	pop	r17
 198:	0f 91       	pop	r16
 19a:	08 95       	ret

0000019c <_Z8lcd_initv>:
void lcd_init()
{
	disp_cmd(0X02);
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_cmd(0X28);
 1a4:	88 e2       	ldi	r24, 0x28	; 40
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_cmd(0X0C);
 1ac:	8c e0       	ldi	r24, 0x0C	; 12
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_cmd(0X06);
 1b4:	86 e0       	ldi	r24, 0x06	; 6
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 1bc:	08 95       	ret

000001be <main>:
void disp_string(  char *str);

int main(void)
{
	
	DDRB = 0XFF;
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	87 bb       	out	0x17, r24	; 23
	DDRC = 0X00;
 1c2:	14 ba       	out	0x14, r1	; 20
	lcd_init();
 1c4:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z8lcd_initv>
	disp_cmd(0X80);
 1c8:	80 e8       	ldi	r24, 0x80	; 128
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_string("WELCOME");
 1d0:	80 e6       	ldi	r24, 0x60	; 96
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z11disp_stringPc>
 1d8:	2f ef       	ldi	r18, 0xFF	; 255
 1da:	89 e6       	ldi	r24, 0x69	; 105
 1dc:	98 e1       	ldi	r25, 0x18	; 24
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	90 40       	sbci	r25, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <main+0x20>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0x2a>
 1e8:	00 00       	nop
	_delay_ms(1000);
	disp_cmd(0X01);
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 1f2:	8f e9       	ldi	r24, 0x9F	; 159
 1f4:	9f e0       	ldi	r25, 0x0F	; 15
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0x38>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x3e>
 1fc:	00 00       	nop
	_delay_ms(2);
	disp_cmd(0X80);
 1fe:	80 e8       	ldi	r24, 0x80	; 128
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_string("CAR PARKING ");
 206:	88 e6       	ldi	r24, 0x68	; 104
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z11disp_stringPc>
	disp_cmd(0XC0);
 20e:	80 ec       	ldi	r24, 0xC0	; 192
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_string("    SYSTEM");
 216:	85 e7       	ldi	r24, 0x75	; 117
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z11disp_stringPc>
	

	
	int x=0;
 21e:	c0 e0       	ldi	r28, 0x00	; 0
 220:	d0 e0       	ldi	r29, 0x00	; 0
 222:	9f ef       	ldi	r25, 0xFF	; 255
 224:	29 e6       	ldi	r18, 0x69	; 105
 226:	88 e1       	ldi	r24, 0x18	; 24
 228:	91 50       	subi	r25, 0x01	; 1
 22a:	20 40       	sbci	r18, 0x00	; 0
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <main+0x6a>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0x74>
 232:	00 00       	nop
	while (1)
	{
		
		
		_delay_ms(1000);
		disp_cmd(0X01);
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 23c:	8f e9       	ldi	r24, 0x9F	; 159
 23e:	9f e0       	ldi	r25, 0x0F	; 15
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0x82>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x88>
 246:	00 00       	nop
		_delay_ms(2);
		disp_cmd(0X80);
 248:	80 e8       	ldi	r24, 0x80	; 128
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
		disp_string("NUMBER OF CARS");
 250:	80 e8       	ldi	r24, 0x80	; 128
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z11disp_stringPc>
		
		
		if(PINC==0X01)
 258:	83 b3       	in	r24, 0x13	; 19
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	09 f4       	brne	.+2      	; 0x260 <main+0xa2>
		{
			x++;
 25e:	21 96       	adiw	r28, 0x01	; 1
			
		}
		disp_cmd(0XC4);
 260:	84 ec       	ldi	r24, 0xC4	; 196
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
		disp_num(x);
 268:	ce 01       	movw	r24, r28
 26a:	0e 94 8d 00 	call	0x11a	; 0x11a <_Z8disp_numj>
 26e:	9f ef       	ldi	r25, 0xFF	; 255
 270:	29 e6       	ldi	r18, 0x69	; 105
 272:	88 e1       	ldi	r24, 0x18	; 24
 274:	91 50       	subi	r25, 0x01	; 1
 276:	20 40       	sbci	r18, 0x00	; 0
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0xb6>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0xc0>
 27e:	00 00       	nop
 280:	d0 cf       	rjmp	.-96     	; 0x222 <main+0x64>

00000282 <__umulhisi3>:
 282:	a2 9f       	mul	r26, r18
 284:	b0 01       	movw	r22, r0
 286:	b3 9f       	mul	r27, r19
 288:	c0 01       	movw	r24, r0
 28a:	a3 9f       	mul	r26, r19
 28c:	01 d0       	rcall	.+2      	; 0x290 <__umulhisi3+0xe>
 28e:	b2 9f       	mul	r27, r18
 290:	70 0d       	add	r23, r0
 292:	81 1d       	adc	r24, r1
 294:	11 24       	eor	r1, r1
 296:	91 1d       	adc	r25, r1
 298:	08 95       	ret

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
